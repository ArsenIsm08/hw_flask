from flask import Flask, request, jsonify
from pydantic import BaseModel

app = Flask(__name__)

# Модель данных для задачи
class TaskModel(BaseModel):
    title: str
    description: str
    status: bool = False

# Имитация базы данных
tasks_db = {}
task_id_counter = 1

# Получение списка всех задач
@app.route('/tasks', methods=['GET'])
def get_tasks():
    tasks = [{'id': task_id, **task} for task_id, task in tasks_db.items()]
    return jsonify(tasks)

# Получение задачи по ID
@app.route('/tasks/<int:task_id>', methods=['GET'])
def get_task(task_id):
    task = tasks_db.get(task_id)
    if task:
        return jsonify({'id': task_id, **task})
    else:
        return jsonify({'error': 'Task not found'}), 404

# Добавление новой задачи
@app.route('/tasks', methods=['POST'])
def add_task():
    data = request.get_json()
    try:
        task = TaskModel(**data)
        global task_id_counter
        task_id = task_id_counter
        tasks_db[task_id] = task.dict()
        task_id_counter += 1
        return jsonify({'id': task_id, **task.dict()}), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 400

# Обновление задачи по ID
@app.route('/tasks/<int:task_id>', methods=['PUT'])
def update_task(task_id):
    task = tasks_db.get(task_id)
    if task:
        data = request.get_json()
        try:
            updated_task = TaskModel(**data)
            tasks_db[task_id] = updated_task.dict()
            return jsonify({'id': task_id, **updated_task.dict()})
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    else:
        return jsonify({'error': 'Task not found'}), 404

# Удаление задачи по ID
@app.route('/tasks/<int:task_id>', methods=['DELETE'])
def delete_task(task_id):
    task = tasks_db.pop(task_id, None)
    if task:
        return jsonify({'message': 'Task deleted successfully'})
    else:
        return jsonify({'error': 'Task not found'}), 404

if __name__ == '__main__':
    app.run(debug=True)
